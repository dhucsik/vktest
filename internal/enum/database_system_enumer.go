// Code generated by "enumer -type=DatabaseSystem -trimprefix DatabaseSystem -output=database_system_enumer.go"; DO NOT EDIT.

package enum

import (
	"fmt"
	"strings"
)

const _DatabaseSystemName = "PostgresMongoMySQL"

var _DatabaseSystemIndex = [...]uint8{0, 8, 13, 18}

const _DatabaseSystemLowerName = "postgresmongomysql"

func (i DatabaseSystem) String() string {
	if i < 0 || i >= DatabaseSystem(len(_DatabaseSystemIndex)-1) {
		return fmt.Sprintf("DatabaseSystem(%d)", i)
	}
	return _DatabaseSystemName[_DatabaseSystemIndex[i]:_DatabaseSystemIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _DatabaseSystemNoOp() {
	var x [1]struct{}
	_ = x[DatabaseSystemPostgres-(0)]
	_ = x[DatabaseSystemMongo-(1)]
	_ = x[DatabaseSystemMySQL-(2)]
}

var _DatabaseSystemValues = []DatabaseSystem{DatabaseSystemPostgres, DatabaseSystemMongo, DatabaseSystemMySQL}

var _DatabaseSystemNameToValueMap = map[string]DatabaseSystem{
	_DatabaseSystemName[0:8]:        DatabaseSystemPostgres,
	_DatabaseSystemLowerName[0:8]:   DatabaseSystemPostgres,
	_DatabaseSystemName[8:13]:       DatabaseSystemMongo,
	_DatabaseSystemLowerName[8:13]:  DatabaseSystemMongo,
	_DatabaseSystemName[13:18]:      DatabaseSystemMySQL,
	_DatabaseSystemLowerName[13:18]: DatabaseSystemMySQL,
}

var _DatabaseSystemNames = []string{
	_DatabaseSystemName[0:8],
	_DatabaseSystemName[8:13],
	_DatabaseSystemName[13:18],
}

// DatabaseSystemString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DatabaseSystemString(s string) (DatabaseSystem, error) {
	if val, ok := _DatabaseSystemNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _DatabaseSystemNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DatabaseSystem values", s)
}

// DatabaseSystemValues returns all values of the enum
func DatabaseSystemValues() []DatabaseSystem {
	return _DatabaseSystemValues
}

// DatabaseSystemStrings returns a slice of all String values of the enum
func DatabaseSystemStrings() []string {
	strs := make([]string, len(_DatabaseSystemNames))
	copy(strs, _DatabaseSystemNames)
	return strs
}

// IsADatabaseSystem returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DatabaseSystem) IsADatabaseSystem() bool {
	for _, v := range _DatabaseSystemValues {
		if i == v {
			return true
		}
	}
	return false
}
